(()=>{const e=async e=>{await fetch("/api/weather?zipcode="+e).then((e=>e.json())).then((e=>(e=>{console.log(e);const t=e[0].location.name,o=e[0].current.temperature,n=e[0].forecast,r={lat:e[0].location.lat,long:e[0].location.long};if(writeToLocalStorage("latlong",JSON.stringify(r)),"content"in document.createElement("template")){const e=document.querySelector("#weathertemplate"),r=document.querySelector(".row.current"),a=document.querySelector(".row.forecast"),s=e.content.cloneNode(!0);let l=s.querySelector("h2"),d=s.querySelector("p");l.textContent="Weather in "+t,d.textContent="The current temperature is "+o+" degrees.",r.appendChild(s),n.forEach(((t,o)=>{const r=((e,t)=>{let o=t+1;const r=n[t-1],a=n[o];let s=0;return t>0&&(r.precip>70?s-=5:r.precip>50?s-=3:r.precip>30?s-=1:s+=5),console.log(`the mowpoints after prevDay check for ${e.day} are: `+s),t<n.length-1&&(a.precip>70?s+=10:a.precip>50?s+=8:a.precip>30?s+=5:a.precip>20?s+=3:a.precip>10?s+=2:a.precip>0&&(s+=1)),console.log(`the mowpoints after nextDay check for ${e.day} are: `+s),e.precip>=0&&e.precip<10?s+=10:e.precip>=10&&e.precip<20?s+=8:e.precip>=20&&e.precip<35?s+=5:(e.precip,s=0),console.log(`the mowpoints after self check for ${e.day} are: `+s),s})(t,o),s=e.content.cloneNode(!0);let l=s.querySelector("h2"),d=s.querySelector("p.high"),c=s.querySelector("p.low"),i=s.querySelector("p.precip"),m=s.querySelector("p.skytextday"),u=t.skytextday.replaceAll(" ","-").toLowerCase();l.textContent=t.day,d.textContent="High: "+t.high,c.textContent="Low: "+t.low,i.textContent="Precipitation: "+t.precip,m.textContent="Sky: "+t.skytextday,m.parentElement.classList.add(u),m.parentElement.dataset.mowScore=r,a.appendChild(s)}));const c=document.querySelectorAll(".row.forecast div[data-mow-score]"),i=[],m=[],u=[];c.forEach(((e,t)=>{let o=e.dataset.mowScore;o>=10?(e.classList.add("good-mow"),i.push(e)):o>=5?(e.classList.add("ok-mow"),m.push(e)):(e.classList.add("bad-mow"),u.push(e))}));const p=Array.from(c).reduce(((e,t,o)=>{const n=parseInt(t.dataset.mowScore);return n>e.score?{score:n,element:t}:e}),{score:0,element:null});console.log(p.score),console.log(p.element),p.element.classList.add("best-day-to-mow"),((e,t,o)=>{const n=document.querySelector(".summary"),r=document.createElement("p"),a=document.createElement("p"),s=document.createElement("p");e.length>1?r.textContent="The best days to mow are: ":0===e.length?r.textContent="There are no best days to mow. ðŸ’©":r.textContent="The best day to mow is: ",e.forEach(((t,o)=>{r.textContent+=t.querySelector("h2").textContent,o<e.length-1?r.textContent+="ðŸŒž, ":r.textContent+="ðŸŒž"})),t.length>1?a.innerHTML="The <i>iffy</i> days to mow are: ":0===t.length?a.innerHTML="There are no <i>iffy</i> days to mow. ðŸ¤·":a.innerHTML="The <i>iffy</i> day to mow is: ",t.forEach(((e,o)=>{a.textContent+=e.querySelector("h2").textContent,o<t.length-1?a.textContent+="ðŸ¤ž, ":a.textContent+="ðŸ¤ž"})),o.length>1?s.textContent="The worst days to mow are: ":0===o.length?s.textContent="There are no bad days! ðŸ¤™":s.textContent="The worst day to mow is: ",o.forEach(((e,t)=>{s.textContent+=e.querySelector("h2").textContent,t<o.length-1?s.textContent+="ðŸ’©, ":s.textContent+="ðŸ’©"})),n.appendChild(r),n.appendChild(a),n.appendChild(s)})(i,m,u)}})(e))).catch((e=>{console.error("Error:",e)}))};document.getElementById("iMowed").addEventListener("click",(()=>{console.log("mowed"),(()=>{const e=document.querySelector("body"),t=document.createElement("div"),o=document.createElement("div");t.classList.add("mowdal-backdrop","fade","show"),o.classList.add("modal"),o.setAttribute("id","mowedFormModal"),o.setAttribute("tabindex","-1"),o.setAttribute("aria-labelledby","mowedFormLabel"),o.setAttribute("aria-hidden","true"),o.innerHTML='\n        <div class="modal-dialog">\n            <div class="modal-content">\n                <form id="mowedForm">\n                    <div class="modal-header">\n                        <button type="button" class="btn-close" data-mowdal-dismiss="modal" aria-label="Close">X</button>\n                    </div>\n                    <input type="hidden" id="mowed-id">\n                    <div class="modal-body" id="mowedFormBody">\n                        <div class="mb-3">\n                            <label for="mowedYardState" class="form-label">Grass Height</label>\n                            <div class="mb-3-group">\n                                <legend>Before</legend>\n                                <fieldset>\n                                    <div class="grass-height-before">\n                                        <input name="grass-height-before" type="number" step="0.25" class="form-control grass-height-before" id="grassHeightBefore" min="0" placeholder="0.0" required>\n                                        <span>inches</span>\n                                    </div>\n                                </fieldset>\n                            </div>\n                            <div class="mb-3-group">\n                                <legend>After</legend>\n                                <fieldset>\n                                    <div class="grass-height-after">\n                                        <input name="grass-height-after" type="number" step="0.25" class="form-control grass-height-after" id="grassHeightAfter" min="0" placeholder="0.0" required>\n                                        <span>inches</span>\n                                    </div>\n                                </fieldset>\n                            </div>\n                        </div>\n                        <div class="mb-3">\n                            <label for="mowedYardState" class="form-label">Yard State</label>\n                            <div class="form-control mowed-yard-state" id="mowedYardState">\n                                <button class="yard-state-button">Bare</button>\n                                <button class="yard-state-button">Bare Spots</button>\n                                <button class="yard-state-button">Average</button>\n                                <button class="yard-state-button">Lush</button>\n                            </div>\n                        </div>\n                        <div class="mb-3">\n                            <label for="mowedWeedsState" class="form-label">Weeds State</label>\n                            <div class="form-control mowed-weeds-state" id="mowedWeedsState">\n                                <button class="weeds-state-button">None</button>\n                                <button class="weeds-state-button">Sparce</button>\n                                <button class="weeds-state-button">Mostly</button>\n                                <button class="weeds-state-button">All</button>\n                            </div>\n                        </div>\n                        <div class="mb-3">\n                            <label for="mowed-date" class="form-label">Date Mowed</label>\n                            <input name="mowed-date" type="date" class="form-control mowed-date" id="mowedDate" required>\n                        </div>\n                    </div>\n                    <div class="modal-footer">\n                        <button type="submit" class="btn btn-primary disabled" data-mowdal-save="modal">Save</button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    ',t.appendChild(o),e.appendChild(t),o.querySelector('button[data-mowdal-dismiss="modal"]').addEventListener("click",(()=>{t.remove()})),o.querySelectorAll("input.form-control").forEach((e=>{e.addEventListener("click",(e=>{const t=e.target.parentElement;(e.target.classList.contains("error")||t.classList.contains("error"))&&(t.classList.remove("error"),e.target.classList.remove("error"))}))}));const n=o.querySelectorAll(".form-control button");n.forEach((e=>{e.addEventListener("click",(e=>{e.preventDefault();const t=e.target.parentElement;t.querySelectorAll("button").forEach((e=>{e.classList.remove("selected")})),e.target.classList.add("selected"),t.classList.contains("error")&&t.classList.remove("error")}))})),o.querySelector('button[data-mowdal-save="modal"]').addEventListener("click",(e=>{e.preventDefault();const o=readFromLocalStorage("mow-history"),r=document.getElementById("mowedForm"),a=e.target,s=new FormData(r,a),l=[],d={},c={},i=document.getElementById("mowedDate").value,m=[];let u,p=0;for(let[e,t]of s)""===t||t<.1?(u=!1,console.log(`${e} is blank`),m.push(e)):(c[e]=t,p++);for(let e of n)e.classList.contains("selected")?(c[e.parentElement.id]=e.textContent,console.log(`${e.parentElement.id} has been selected`),p++):m.push(e.parentElement.id);if(u=5===p,console.log(p),d["mow-date"]=i,d["mow-stats"]=c,console.log(c),console.log(d),u){if(a.classList.remove("disabled"),o){const e=JSON.parse(o);e.push(d),writeToLocalStorage("mow-history",JSON.stringify(e))}else l.push(d),writeToLocalStorage("mow-history",JSON.stringify(l));console.log("mowdal saved"),t.remove()}else(e=>{console.log(e);let t=0,o=0;e.forEach((e=>{"mowedYardState"==e?t++:"mowedWeedsState"==e?o++:document.querySelector(`.${e}`).classList.add("error"),t>3&&document.querySelector("#mowedYardState").classList.add("error"),o>3&&document.querySelector("#mowedWeedsState").classList.add("error")}))})(m)}))})()})),(()=>{const t=readFromLocalStorage("zipCode");t&&"/"===window.location.pathname?(document.getElementById("zipCode").value=t,e(t)):document.getElementById("zipCode").value=t})(),(()=>{const t=document.getElementById("zipCode"),o=document.getElementById("zipCodeError"),n=document.getElementById("zipSubmit");t.addEventListener("input",(()=>{5!==t.value.length?o.innerHTML="Please enter a valid 5 digit zip code":o.innerHTML=""})),n.addEventListener("click",(()=>{console.log("submitButtonClicked"),5!==t.value.length?o.innerHTML="Please enter a valid 5 digit zip code":(o.innerHTML="",console.log("Zip: "+t.value),writeToLocalStorage("zipCode",t.value),toggleView("main"),console.log("EMPTY"),document.querySelector(".row.current").innerHTML="",document.querySelector(".row.forecast").innerHTML="",document.querySelector(".summary").innerHTML="",e(t.value))}))})()})();